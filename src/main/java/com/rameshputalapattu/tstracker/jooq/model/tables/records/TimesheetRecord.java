/*
 * This file is generated by jOOQ.
 */
package com.rameshputalapattu.tstracker.jooq.model.tables.records;


import com.rameshputalapattu.tstracker.jooq.model.tables.Timesheet;

import java.time.LocalDate;

import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record4;
import org.jooq.Row4;
import org.jooq.impl.UpdatableRecordImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class TimesheetRecord extends UpdatableRecordImpl<TimesheetRecord> implements Record4<Integer, LocalDate, String, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>ts.timesheet.id</code>.
     */
    public void setId(Integer value) {
        set(0, value);
    }

    /**
     * Getter for <code>ts.timesheet.id</code>.
     */
    public Integer getId() {
        return (Integer) get(0);
    }

    /**
     * Setter for <code>ts.timesheet.date</code>.
     */
    public void setDate(LocalDate value) {
        set(1, value);
    }

    /**
     * Getter for <code>ts.timesheet.date</code>.
     */
    public LocalDate getDate() {
        return (LocalDate) get(1);
    }

    /**
     * Setter for <code>ts.timesheet.task</code>.
     */
    public void setTask(String value) {
        set(2, value);
    }

    /**
     * Getter for <code>ts.timesheet.task</code>.
     */
    public String getTask() {
        return (String) get(2);
    }

    /**
     * Setter for <code>ts.timesheet.hours</code>.
     */
    public void setHours(Integer value) {
        set(3, value);
    }

    /**
     * Getter for <code>ts.timesheet.hours</code>.
     */
    public Integer getHours() {
        return (Integer) get(3);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    public Record1<Integer> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record4 type implementation
    // -------------------------------------------------------------------------

    @Override
    public Row4<Integer, LocalDate, String, Integer> fieldsRow() {
        return (Row4) super.fieldsRow();
    }

    @Override
    public Row4<Integer, LocalDate, String, Integer> valuesRow() {
        return (Row4) super.valuesRow();
    }

    @Override
    public Field<Integer> field1() {
        return Timesheet.TIMESHEET.ID;
    }

    @Override
    public Field<LocalDate> field2() {
        return Timesheet.TIMESHEET.DATE;
    }

    @Override
    public Field<String> field3() {
        return Timesheet.TIMESHEET.TASK;
    }

    @Override
    public Field<Integer> field4() {
        return Timesheet.TIMESHEET.HOURS;
    }

    @Override
    public Integer component1() {
        return getId();
    }

    @Override
    public LocalDate component2() {
        return getDate();
    }

    @Override
    public String component3() {
        return getTask();
    }

    @Override
    public Integer component4() {
        return getHours();
    }

    @Override
    public Integer value1() {
        return getId();
    }

    @Override
    public LocalDate value2() {
        return getDate();
    }

    @Override
    public String value3() {
        return getTask();
    }

    @Override
    public Integer value4() {
        return getHours();
    }

    @Override
    public TimesheetRecord value1(Integer value) {
        setId(value);
        return this;
    }

    @Override
    public TimesheetRecord value2(LocalDate value) {
        setDate(value);
        return this;
    }

    @Override
    public TimesheetRecord value3(String value) {
        setTask(value);
        return this;
    }

    @Override
    public TimesheetRecord value4(Integer value) {
        setHours(value);
        return this;
    }

    @Override
    public TimesheetRecord values(Integer value1, LocalDate value2, String value3, Integer value4) {
        value1(value1);
        value2(value2);
        value3(value3);
        value4(value4);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached TimesheetRecord
     */
    public TimesheetRecord() {
        super(Timesheet.TIMESHEET);
    }

    /**
     * Create a detached, initialised TimesheetRecord
     */
    public TimesheetRecord(Integer id, LocalDate date, String task, Integer hours) {
        super(Timesheet.TIMESHEET);

        setId(id);
        setDate(date);
        setTask(task);
        setHours(hours);
    }
}
